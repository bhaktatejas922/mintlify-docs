{
  "openapi": "3.1.0",
  "info": {
    "title": "Morph API",
    "description": "API for applying code updates with lightning speed using Morph Apply",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.morphllm.com"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/v1/chat/completions": {
      "post": {
        "description": "Apply code updates to an original file using Morph Apply. Find your API key in the [Morph Dashboard](https://morphllm.com/dashboard).",
        "requestBody": {
          "description": "Code update request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatCompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Chat completion response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatCompletionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/embeddings": {
      "post": {
        "description": "Generate embeddings for code",
        "requestBody": {
          "description": "Embedding generation request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Embedding response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rerank": {
      "post": {
        "description": "Rerank search results by relevance",
        "requestBody": {
          "description": "Reranking request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RerankRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Reranking response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RerankResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ChatCompletionRequest": {
        "type": "object",
        "required": [
          "model",
          "messages"
        ],
        "properties": {
          "model": {
            "type": "string",
            "description": "ID of the model to use (e.g., morph-v2)",
            "example": "morph-v2"
          },
          "messages": {
            "type": "array",
            "description": "A list of messages comprising the conversation so far",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Message": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the message author",
            "enum": ["system", "user", "assistant"],
            "example": "user"
          },
          "content": {
            "type": "string",
            "description": "The content of the message, containing code and update snippets",
            "example": "<code>def calculate_total(items):\n    total = 0\n    for item in items:\n        total += item.price\n    return total</code>\n<update>def calculate_total(items):\n    total = 0\n    for item in items:\n        total += item.price\n    return total * 1.1  # Add 10% tax</update>"
          }
        }
      },
      "ChatCompletionResponse": {
        "type": "object",
        "required": [
          "id",
          "object",
          "created",
          "choices",
          "usage"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the completion",
            "example": "chatcmpl-123"
          },
          "object": {
            "type": "string",
            "description": "Object type",
            "example": "chat.completion"
          },
          "created": {
            "type": "integer",
            "description": "Unix timestamp of when the completion was created",
            "example": 1677652288
          },
          "choices": {
            "type": "array",
            "description": "List of completion choices",
            "items": {
              "$ref": "#/components/schemas/Choice"
            }
          },
          "usage": {
            "type": "object",
            "description": "Usage statistics for the completion request",
            "properties": {
              "prompt_tokens": {
                "type": "integer",
                "description": "Number of tokens in the prompt",
                "example": 25
              },
              "completion_tokens": {
                "type": "integer",
                "description": "Number of tokens in the completion",
                "example": 32
              },
              "total_tokens": {
                "type": "integer",
                "description": "Total number of tokens used",
                "example": 57
              }
            }
          }
        }
      },
      "Choice": {
        "type": "object",
        "required": [
          "index",
          "message",
          "finish_reason"
        ],
        "properties": {
          "index": {
            "type": "integer",
            "description": "Index of the choice in the list",
            "example": 0
          },
          "message": {
            "type": "object",
            "description": "The message generated by the model",
            "properties": {
              "role": {
                "type": "string",
                "description": "The role of the message author",
                "example": "assistant"
              },
              "content": {
                "type": "string",
                "description": "The content of the message",
                "example": "\ndef calculate_total(items):\n    total = 0\n    for item in items:\n        total += item.price\n    return total * 1.1  # Add 10% tax\n"
              }
            }
          },
          "finish_reason": {
            "type": "string",
            "description": "The reason the model stopped generating tokens",
            "example": "stop"
          }
        }
      },
      "EmbeddingRequest": {
        "type": "object",
        "required": [
          "model",
          "input"
        ],
        "properties": {
          "model": {
            "type": "string",
            "description": "ID of the model to use for embedding generation",
            "example": "morph-embedding-v2"
          },
          "input": {
            "oneOf": [
              {
                "type": "string",
                "description": "The text to generate embeddings for",
                "example": "function calculateSum(a, b) { return a + b; }"
              },
              {
                "type": "array",
                "description": "An array of texts to generate embeddings for",
                "items": {
                  "type": "string"
                },
                "example": ["function calculateSum(a, b) { return a + b; }", "class User { constructor(name) { this.name = name; } }"]
              }
            ]
          },
          "encoding_format": {
            "type": "string",
            "description": "The format in which the embeddings are returned",
            "enum": ["float", "base64"],
            "default": "float"
          }
        }
      },
      "EmbeddingResponse": {
        "type": "object",
        "required": [
          "object",
          "data",
          "model",
          "usage"
        ],
        "properties": {
          "object": {
            "type": "string",
            "description": "Object type",
            "example": "list"
          },
          "data": {
            "type": "array",
            "description": "List of embedding objects",
            "items": {
              "type": "object",
              "properties": {
                "object": {
                  "type": "string",
                  "description": "Object type",
                  "example": "embedding"
                },
                "embedding": {
                  "type": "array",
                  "description": "The embedding vector",
                  "items": {
                    "type": "number"
                  },
                  "example": [0.0023064255, -0.009327292, 0.01183665]
                },
                "index": {
                  "type": "integer",
                  "description": "Index of the embedding in the list",
                  "example": 0
                }
              }
            }
          },
          "model": {
            "type": "string",
            "description": "ID of the model used",
            "example": "morph-embedding-v2"
          },
          "usage": {
            "type": "object",
            "description": "Usage statistics",
            "properties": {
              "prompt_tokens": {
                "type": "integer",
                "description": "Number of tokens in the prompt",
                "example": 8
              },
              "total_tokens": {
                "type": "integer",
                "description": "Total number of tokens used",
                "example": 8
              }
            }
          }
        }
      },
      "RerankRequest": {
        "type": "object",
        "required": [
          "model",
          "query"
        ],
        "properties": {
          "model": {
            "type": "string",
            "description": "ID of the model to use for reranking",
            "example": "morph-rerank-v1"
          },
          "query": {
            "type": "string",
            "description": "The search query to compare documents against",
            "example": "How to implement JWT authentication in Express"
          },
          "documents": {
            "type": "array",
            "description": "An array of document strings to be reranked. Required if embedding_ids is not provided.",
            "items": {
              "type": "string"
            },
            "example": [
              "This Express.js middleware provides authentication using JWT tokens and protects routes.",
              "Express.js is a popular web framework for Node.js applications."
            ]
          },
          "embedding_ids": {
            "type": "array",
            "description": "An array of embedding IDs to rerank. Required if documents is not provided. Remote content storage must be enabled.",
            "items": {
              "type": "string"
            },
            "example": [
              "emb_123456789",
              "emb_987654321"
            ]
          },
          "top_n": {
            "type": "integer",
            "description": "Number of top results to return",
            "default": null,
            "example": 5
          },
          "return_documents": {
            "type": "boolean",
            "description": "Whether to include document texts in response",
            "default": true
          }
        },
        "oneOf": [
          {
            "required": ["documents"]
          },
          {
            "required": ["embedding_ids"]
          }
        ]
      },
      "RerankResponse": {
        "type": "object",
        "required": [
          "model",
          "results"
        ],
        "properties": {
          "model": {
            "type": "string",
            "description": "ID of the model used",
            "example": "morph-rerank-v1"
          },
          "results": {
            "type": "array",
            "description": "List of reranked results",
            "items": {
              "type": "object",
              "properties": {
                "index": {
                  "type": "integer",
                  "description": "Original index of the document in the input array",
                  "example": 0
                },
                "document": {
                  "type": "string",
                  "description": "The document text (included if return_documents is true)",
                  "example": "This Express.js middleware provides authentication using JWT tokens and protects routes."
                },
                "relevance_score": {
                  "type": "number",
                  "description": "Score indicating relevance to the query (higher is more relevant)",
                  "example": 0.92
                }
              }
            }
          }
        }
      },
      "Error": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Error message",
                "example": "Invalid API key"
              },
              "type": {
                "type": "string",
                "description": "Error type",
                "example": "invalid_request_error"
              },
              "code": {
                "type": "string",
                "description": "Error code",
                "example": "invalid_api_key"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}